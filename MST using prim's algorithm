// Code and analyze to find the minimum spanning tree in a weighted, undirected graph using Primsâ€™ algorithm?


#include <iostream>
using namespace std;
#define V 5 // Number of vertices in the graph
#define INF 99999 // Large number representing infinity
// Function to find the vertex with the minimum key value that is not yet included in MST
int minKey(int key[], bool mstSet[]) {
	int min = INF, minIndex = -1;
	for (int v = 0; v < V; v++) {
		if (!mstSet[v] && key[v] < min) {
			min = key[v];
			minIndex = v;
		}
	}
	return minIndex;
}
// Function to print the constructed MST
void printMST(int parent[], int graph[V][V]) {
	cout << "Edge \tWeight\n";
	for (int i = 1; i < V; i++) {
		cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] << "\n";
	}
}
// Function to implement Prim's Algorithm
void primMST(int graph[V][V]) {
	int parent[V]; // Stores MST
	int key[V]; // Stores minimum edge weights
	bool mstSet[V]; // Tracks included vertices
// Initialize keys to infinity and MST set to false
	for (int i = 0; i < V; i++) {
		key[i] = INF;
		mstSet[i] = false;
	}
	key[0] = 0; // Start from the first vertex
	parent[0] = -1; // First node is the root
	for (int count = 0; count < V - 1; count++) {
		int u = minKey(key, mstSet); // Pick the minimum key vertex
		mstSet[u] = true; // Include it in MST
// Update key values of adjacent vertices
		for (int v = 0; v < V; v++) {
			if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
				parent[v] = u;
				key[v] = graph[u][v];
			}
		}
	}
// Print the MST
	printMST(parent, graph);
}
// Driver function
int main() {
	int graph[V][V] = {
		{0, 2, 0, 6, 0},
		{2, 0, 3, 8, 5},
		{0, 3, 0, 0, 7},
		{6, 8, 0, 0, 9},
		{0, 5, 7, 9, 0}
	};
	primMST(graph);
	return 0;
}


// OUTPUT :-
//Edge    Weight
//0 - 1   2
//1 - 2   3
//0 - 3   6
//1 - 4   5
