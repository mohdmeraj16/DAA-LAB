// Code and analyze to find shortest paths in a graph with arbitrary edge weights using Bellman-Ford algorithm.

#include <iostream>
using namespace std;
#define INF 1000000  // Large value to represent infinity
// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;};
// Bellman-Ford Algorithm
void bellmanFord(int V, int E, Edge edges[], int source) {
    int distance[V];
    // Step 1: Initialize distances
    for (int i = 0; i< V; i++)
        distance[i] = INF;
    distance[source] = 0;
    // Step 2: Relax all edges (V-1) times
    for (int i = 1; i<= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int w = edges[j].weight;
            if (distance[u] != INF && distance[u] + w < distance[v])
                distance[v] = distance[u] + w;
        }    }
    // Step 3: Check for negative-weight cycles
    for (int j = 0; j < E; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int w = edges[j].weight;
        if (distance[u] != INF && distance[u] + w < distance[v]) {
cout<< "Graph contains a negative-weight cycle!" <<endl;
return;  }    }

  // Print the shortest distances
cout<< "Vertex  Distance from Source " << source <<endl;
    for (int i = 0; i< V; i++) {
        if (distance[i] == INF)
cout<<i<< "\tINF" <<endl;
        else
cout<<i<< "\t" << distance[i] <<endl;}}
// Main function
int main() {
    int V = 5; // Number of vertices
    int E = 8; // Number of edges
    Edge edges[] = {
        {0, 1, -1}, {0, 2, 4}, 
        {1, 2, 3}, {1, 3, 2}, {1, 4, 2}, 
        {3, 2, 5}, {3, 1, 1}, {4, 3, -3}
    };
    int source = 0;
bellmanFord(V, E, edges, source);
    return 0;}



//OUTPUT :-
//0       0
//1       -1
//2       2
//3       -2
//4       1
