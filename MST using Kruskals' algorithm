// Code and analyze to find the minimum spanning tree in a weighted, undirected graph using Kruskalsâ€™ algorithm.

#include <iostream>
using namespace std;
#define V 5 // Number of vertices in the graph
#define E 7 // Number of edges in the graph
// Structure to represent an edge
struct Edge {
	int src, dest, weight;
};
// Structure to represent a subset for Union-Find
struct Subset {
	int parent;
	int rank;
};
// Function to find the parent of a node (with path compression)
int find(Subset subsets[], int i) {
	if (subsets[i].parent != i)
		subsets[i].parent = find(subsets, subsets[i].parent);
	return subsets[i].parent;
}
// Function to perform Union of two subsets
void Union(Subset subsets[], int x, int y) {
	int rootX = find(subsets, x);
	int rootY = find(subsets, y);
	if (subsets[rootX].rank < subsets[rootY].rank)
		subsets[rootX].parent = rootY;
	else if (subsets[rootX].rank > subsets[rootY].rank)
		subsets[rootY].parent = rootX;
	else {
		subsets[rootY].parent = rootX;
		subsets[rootX].rank++;
	}
}
// Function to implement Kruskal's Algorithm
void kruskalMST(Edge edges[]) {
	Edge result[V - 1]; // Stores the MST
	Subset subsets[V]; // Create V subsets
// Initialize subsets
	for (int v = 0; v < V; v++) {
		subsets[v].parent = v;
		subsets[v].rank = 0;
	}
// Sort edges in increasing order of weight (Simple Bubble Sort for arrays)
	for (int i = 0; i < E - 1; i++) {
		for (int j = 0; j < E - i - 1; j++) {
			if (edges[j].weight > edges[j + 1].weight) {
				Edge temp = edges[j];
				edges[j] = edges[j + 1];
				edges[j + 1] = temp;
			}
		}
	}
	int e = 0; // Count of MST edges
	int i = 0; // Index for sorted edges
	while (e < V - 1) {
		Edge nextEdge = edges[i++];
		int x = find(subsets, nextEdge.src);
		int y = find(subsets, nextEdge.dest);
		if (x != y) { // If including this edge doesn't form a cycle
			result[e++] = nextEdge;
			Union(subsets, x, y);
		}
	}
// Print the MST
	cout << "Edge \tWeight\n";
	for (int i = 0; i < V - 1; i++)
		cout << result[i].src << " - " << result[i].dest << " \t" << result[i].weight << "\n";
}
// Driver function
int main() {
	Edge edges[E] = {
		{0, 1, 2}, {0, 3, 6}, {1, 2, 3}, {1, 3, 8}, {1, 4, 5}, {2, 4, 7}, {3, 4, 9}
	};
	kruskalMST(edges);
	return 0;
}

// OUTPUT :-
// Edge    Weight
// 0 - 1   2
// 1 - 2   3
// 1 - 4   5
// 0 - 3   6
